Clase: ImportFITSCubeAlma.java
Localización del paquete: es.cab.plugins.impor

Métodos y localización en la clase:

- Declaración de variables (Lineas 77-89). 
- Declaració del lector de rows (lineas 92-95). 
- importCube (el método más importante de la clase) (Lineas 99-421). 
- changeValuesVeloOld (Lineas 423-512). 
- setValue (Lineas 514-550). 
- setBeamValues (Lineas 552-609). 
- generateNewCube (Lineas 610-788). 
- calculatesigma (Lineas 790-881). 
- objArr2List (Lineas 1059-1108). 
- unitcalculation (Lineas 1111- 1617).
- calculateStdDev (Lineas 1619-1635). 

Entre el método objArr2List y el método unitcalculation hay mucho código muerto. 
En el método unitcalculation hay muchisimo código muerto, aproximadamente el 85% de las lineas que ocupa el método
son código muerto). 

******************************
*** Análisis de importCube ***
******************************
- Primero se declaran variables. 

Todo el proceso de este método está en un gran bloque try-catch. 
Dentro de este bloque try-catch:
   - Se declara el fits a partir de la string que se ha pasado al método como argumento. (Se lee). 
   - Se obtiene el numero de HDUs. 
   - Se declara y se obtiene el basicHdu. 

**Nota**
El basichdu parece ser una variable que se va usando y reusando en cada momento. No hay UN BASIC HDU, es el que se está
usando en ese momento. 
********

   -initRow("CUBE") --> row[27] = 2000f y no 2000. 
   -Se asignan unidades para ciertos valores de las rows. 

   - Se procesa la posición 0
      Se asigna el basichdu --> basicHdu = fits.getHDU(0)
      Se asigna el origen -> FITS_HEADER_ORIGIN --> "ORIGIN". 

   - Se insertan cards
      processHead(basicHdu.getHeader()) TODO: Hay que repasar mejor este proceso y completar la información []
         Es un método de la clase importFITS
         Se le pasa un header, en este caso el header del basicHdu. 
            Se inicia un cursor para recorrer el header. 
            Se instancia un objeto HeaderCard y una string vacia KeyAux. 
            Se va leyendo el cursor:
               Se asigna que card es y si es una key jerarquica. 

**Nota**
getHierarchKey, un método de la clase importFITS
Viene de la library nom.tam FITS, en particular del método getUseHierarchkey. 
Es simplemente un booleano que es true or false dependiendo de si se usan HIERARCH keywords. 
En FITS se usa HIERARCH keyword para definir keywords que son más largas que 8 caracteres o que contienen 
caracteres no permitidos en las keywords estandar para FITS.
********

      En el processHead se hace uso de hdrOrigin (que pertenece a ImportFITS). Es un header que se declara sin más
al principio de la clase. 
      Se añade la key con value "ImportFile". 


   - Si el origen es nulo se le asigna valor. 
      Definido como constante --> FITS_HEADER_ORIGIN
   - Un if para comprobar si el cubo es de CASA (podemos obviarlo al implemenar el importer de JWST). 

   - Después de comprobar si es CASA o no, se vuelve a usar processHead()

   - Se obtiene el desplazamiento de la imagen. 
      offset --> getFileOffset + getOriginalSize
     Esto lo hace cuando se cumple esta condición: "if basicHdu instanceof ImageHDU"

Hay un nuevo precessHead para insertar cards en la linea 160 del fichero de Java original (de Carmen) que no sabia
a que se debia. El objeto basicHdu cambia, se reasigna en la linea 148 con lo cual tiene sentido que se vuelvan a
procesar las columnas de datos. 

De nuevo hay un metodo que parece estar duplicado en su uso, que es castCrpix. 
Este metodo lo que hace es ajustar el centro de la imagen en pixeles, esta tambien explicado en este documento.
El uso duplicado (linea 214 en el codigo original de Carmen) se debe a que en las lineas anteriores (196-206)
se reajustan las dimensiones del beam, que están ligadas con este valor de Crpix y por tanto tiene sentido que 
se vuelva a calcular. 
De todas maneras no parece que sea siempre el reajuste del beam asi que probablemente no deberia de ser siempre
el castCrpix, pero eso es algo menor. 
 
Esta linea y este comentario hay que ver si aun tienen sentido y validez para JWST:
row.set(TELESCOP, MyConstants.TELESCOPE_ALMA_COMMON);// Siempre que se importe un cubo poner como COMON_BEAM>

Hay que mirar y que documentar que es lo que hace el metodo escribCnsolaHeader para ver porque hacemos esta
linea dspues de asignar el valor COMMON_BEAM.

Analisis de los otros metodos (secundarios) en la clase

*************************************
***Analisis de changeValuesVeloOld***
*************************************
Este método actualiza los valores relacionados con velocidades espectrales y desplazamiento al rojo 
en la cabecera FITS. Acepta una lista de argumentos con etiquetas (VELO, VRAD, VOPT, REDSHIFT) y realiza las 
conversiones necesarias para garantizar coherencia entre las unidades y el sistema espectral del archivo.

Parámetros:
    listNewArgs: Una lista de argumentos en formato etiqueta$valor$unidad.
    newArgs: Cadena acumulativa con los valores procesados para aplicar cambios.
    hdr: Cabecera del archivo FITS que se actualizará.
    wcsGlobal: Objeto que maneja el sistema de coordenadas espectrales y sus conversiones.

- Valida que los argumentos de entrada no sean nulos o vacíos.
- Divide los argumentos en tokens (por ejemplo, VELO$3000$km/s).
- Extrae la etiqueta, el valor y la unidad de cada token.
- Realiza conversiones entre tipos de velocidades (radial, óptica, desplazamiento al rojo) utilizando 
  SpectralTransformator.
- Inserta los valores convertidos en la cabecera FITS.

Utiliza UnitTransformator para cambiar entre diferentes sistemas espectrales y unidades (por ejemplo, de km/s a m/s). 
También se asegura de que las transformaciones sean consistentes con el sistema espectral (VOPT, VRAD, etc.) definido 
en el objeto WCSGlobal.
